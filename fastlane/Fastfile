# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

default_platform(:android)

platform :android do
  desc "Runs all the tests"
  lane :test do
    gradle(task: "test")
  end

  desc "Submit a new Beta Build to Crashlytics Beta"
  lane :beta do
    gradle(task: "clean assembleRelease")
    crashlytics
  
    # sh "your_script.sh"
    # You can also use other beta testing services here
  end

  desc "Submit a new version to Firebase App Distribution"
  lane :firebase do
    fetch_and_increment_firebase_build_number

    gradle(
      task: "assemble",
      build_type: "debug",
      properties: {
        "android.injected.signing.store.file" => ENV["KEYSTORE_FILE"],
        "android.injected.signing.store.password" => ENV["KEYSTORE_PASSWORD"],
        "android.injected.signing.key.alias" => ENV["KEY_ALIAS"],
        "android.injected.signing.key.password" => ENV["KEY_PASSWORD"],
     }
    )

   firebase_app_distribution(
      app: ENV["FIREBASE_APP_ID"],
      firebase_cli_token: ENV["FIREBASE_TOKEN"],
      service_credentials_file: ENV["FIREBASE_SERVICE_ACCOUNT_KEY"],
      android_artifact_type: "APK",
      groups: "testers"
   )
    end

  desc "Deploy a new version to the Google Play"
  lane :deploy do
    fetch_and_increment_googleplay_build_number

    gradle(
      task: "bundle",
      build_type: "release",
      properties: {
        "android.injected.signing.store.file" => ENV["KEYSTORE_FILE"],
        "android.injected.signing.store.password" => ENV["KEYSTORE_PASSWORD"],
        "android.injected.signing.key.alias" => ENV["KEY_ALIAS"],
        "android.injected.signing.key.password" => ENV["KEY_PASSWORD"],
      }
    )

    upload_to_play_store(
      track: "internal",
      json_key: ENV["GOOGLE_PLAY_SERVICE_ACCOUNT_KEY"],
      skip_upload_aab: true
    )
  end

  desc "Fetches the latest version code from the Play Console and increments it by 1"
  lane :fetch_and_increment_googleplay_build_number do
    incremented_version_code = latest_googleplay_version_code() + 1
    increment_version_code(
      version_code: incremented_version_code,
      gradle_file_path: "app/build.gradle.kts"
    )
  end

  desc "Fetches the latest version code from the Firebase App Distribution and increments it by 1"
  lane :fetch_and_increment_firebase_build_number do
    latest_release = firebase_app_distribution_get_latest_release(
      app: ENV["FIREBASE_APP_ID"],
      firebase_cli_token: ENV["FIREBASE_TOKEN"],
      service_credentials_file: ENV["FIREBASE_SERVICE_ACCOUNT_KEY"]
    )
    incremented_version_code = latest_release[:buildVersion].to_i + 1
    increment_version_code(
      version_code: incremented_version_code,
      gradle_file_path: "app/build.gradle.kts"
    )
  end

  def latest_googleplay_version_code
    app_identifier = CredentialsManager::AppfileConfig.try_fetch_value(:app_identifier)

#     productionVersionCodes = google_play_track_version_codes(
#       package_name: app_identifier,
#       track: 'production',
#       json_key: ENV["GOOGLE_PLAY_SERVICE_ACCOUNT_KEY"]
#     )
#     betaVersionCodes = google_play_track_version_codes(
#       package_name: app_identifier,
#       track: 'beta',
#       json_key: ENV["GOOGLE_PLAY_SERVICE_ACCOUNT_KEY"]
#     )
#     alphaVersionCodes = google_play_track_version_codes(
#       package_name: app_identifier,
#       track: 'alpha',
#       json_key: ENV["GOOGLE_PLAY_SERVICE_ACCOUNT_KEY"]
#     )
    internalVersionCodes = google_play_track_version_codes(
      package_name: app_identifier,
      track: 'internal',
      json_key: ENV["GOOGLE_PLAY_SERVICE_ACCOUNT_KEY"]
    )

    versionCodes = [
#       productionVersionCodes,
#       betaVersionCodes,
#       alphaVersionCodes,
      internalVersionCodes
    ].reduce([], :concat)

    return versionCodes.max

  end
  end
end

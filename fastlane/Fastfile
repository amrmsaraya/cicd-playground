# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

default_platform(:android)

platform :android do
  desc "Runs all the tests"
  lane :test do
    gradle(task: "test")
  end

  desc "Submit a new Beta Build to Crashlytics Beta"
  lane :beta do
    gradle(task: "clean assembleRelease")
    crashlytics
  
    # sh "your_script.sh"
    # You can also use other beta testing services here
  end

  desc "Deploy a new version to the Google Play"
  lane :deploy do
    fetch_and_increment_build_number

    gradle(
      task: "bundle",
      build_type: "release",
      properties: {
        "android.injected.signing.store.file" => ENV["KEYSTORE_FILE"],
        "android.injected.signing.store.password" => ENV["KEYSTORE_PASSWORD"],
        "android.injected.signing.key.alias" => ENV["KEY_ALIAS"],
        "android.injected.signing.key.password" => ENV["KEY_PASSWORD"],
      }
    )

    upload_to_play_store(
      track: "internal",
      json_key: ENV["ANDROID_JSON_KEY_FILE"]
    )
  end

  desc "Fetches the latest version code from the Play Console and increments it by 1"
  lane :fetch_and_increment_build_number do
    app_identifier = CredentialsManager::AppfileConfig.try_fetch_value(:app_identifier)

    incremented_version_code = latest_googleplay_version_code() + 1

    increment_version_code(version_code: incremented_version_code)
  end

  def latest_googleplay_version_code
    productionVersionCodes = google_play_track_version_codes(track: 'production')
    betaVersionCodes = google_play_track_version_codes(track: 'beta')
    alphaVersionCodes = google_play_track_version_codes(track: 'alpha')
    internalVersionCodes = google_play_track_version_codes(track: 'internal')

    versionCodes = [
      productionVersionCodes,
      betaVersionCodes,
      alphaVersionCodes,
      internalVersionCodes
    ].reduce([], :concat)

    return versionCodes.max
  end
end
